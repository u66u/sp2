WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }

// Basic types
ident   = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
integer = @{ ASCII_DIGIT+ }
string  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// Operators
add_op   = { "+" | "-" }
mul_op   = { "*" | "/" }
operator = { add_op | mul_op }

// Type annotations
type_annotation = { "Int" | "String" }

// Literals and basic expressions
literal         =  { integer | string }
expression_atom = _{ literal | ident | function_call | "(" ~ expression ~ ")" }

// Expressions
unary_operation  = _{ expression_atom }
binary_operation =  { unary_operation ~ (operator ~ unary_operation)* }
expression       =  { binary_operation }

// Function-related rules
param         = { ident ~ ":" ~ type_annotation }
param_list    = { param ~ ("," ~ param)* }
argument_list = { expression ~ ("," ~ expression)* }
function_call = { ident ~ "(" ~ argument_list? ~ ")" }
function_def = { "fn" ~ ident ~ "(" ~ param_list? ~ ")" ~ "->" ~ type_annotation ~ "{" ~ (block | statement)* ~ "}" }

// Statements
let_statement        = { "let" ~ ident ~ "=" ~ expression }
expression_statement = { expression }
return_statement     = { "return" ~ expression }
statement            = { let_statement | return_statement | expression_statement }

// Block structure
block = { "{" ~ statement* ~ "}" }

// Top-level structure
top_level_statement = { let_statement | function_call }

// Program
program = { SOI ~ (function_def | top_level_statement | block)* ~ EOI }
